diff --git a/node_modules/fetch-dns/Rrtypes.ts b/node_modules/fetch-dns/Rrtypes.ts
index 64218d9..4a83b86 100644
--- a/node_modules/fetch-dns/Rrtypes.ts
+++ b/node_modules/fetch-dns/Rrtypes.ts
@@ -1,38 +1,36 @@
 /** @format */
 
 import data from "./RrtypesData.json";
-import _ from "lodash";
+import _ from "underscore";
 import Debug from "debug";
 
 const log = Debug("fetch-dns:rrtypes");
 const debug = log.extend("debug");
 if (debug.enabled) log.enabled = true;
 
-const rrtypeMap = _.fromPairs(
-	_.flatMap(data, (rrtype) => {
-		debug("Processing RRTYPE map entry", rrtype);
-		const { TYPE, Value } = rrtype || {};
-		if (
-			TYPE === "Unassigned" ||
-			TYPE === "Private use" ||
-			TYPE === "Reserved"
-		) {
-			debug("Skipping unused RRTYPE allocation", TYPE, Value);
-			return [];
-		}
-		const [start, stop] = _.map(_.split(Value, "-", 2), _.toFinite);
-		if (_.includes(Value, "-")) {
-			if (start === 0 || stop === 0) {
-				log("Discovered an unbounded value", rrtype);
-				return [];
-			} else {
-				return _.map(_.range(start, stop + 1), (i) => [_.toString(i), TYPE]);
-			}
-		} else {
-			return [[Value, TYPE]];
-		}
-	}),
-);
+const rrtypeMap = Object.fromEntries(data.flatMap((rrtype) => {
+  debug("Processing RRTYPE map entry", rrtype);
+  const { TYPE, Value } = rrtype || {};
+  if (TYPE === "Unassigned" ||
+      TYPE === "Private use" ||
+      TYPE === "Reserved") {
+      debug("Skipping unused RRTYPE allocation", TYPE, Value);
+      return [];
+  }
+  const [start, stop] = _.map(_.split(Value, "-", 2), _.toFinite);
+  if (_.includes(Value, "-")) {
+      if (start === 0 || stop === 0) {
+          log("Discovered an unbounded value", rrtype);
+          return [];
+      }
+      else {
+          return _.map(_.range(start, stop + 1), (i) => [_.toString(i), TYPE]);
+      }
+  }
+  else {
+      return [[Value, TYPE]];
+  }
+}));
 
 log(rrtypeMap);
 
diff --git a/node_modules/fetch-dns/build/Cache.js b/node_modules/fetch-dns/build/Cache.js
index 7eeaa63..fda1f49 100644
--- a/node_modules/fetch-dns/build/Cache.js
+++ b/node_modules/fetch-dns/build/Cache.js
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = tslib_1.__importDefault(require("underscore"));
 const isFQDN_1 = tslib_1.__importDefault(require("validator/lib/isFQDN"));
 const events_1 = require("events");
 const CLEAN_PERIOD_MILLIS = 600 * 1000;
diff --git a/node_modules/fetch-dns/build/Rrtypes.js b/node_modules/fetch-dns/build/Rrtypes.js
index 0bf3a1b..2e2df39 100644
--- a/node_modules/fetch-dns/build/Rrtypes.js
+++ b/node_modules/fetch-dns/build/Rrtypes.js
@@ -2,34 +2,34 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const tslib_1 = require("tslib");
 const RrtypesData_json_1 = tslib_1.__importDefault(require("./RrtypesData.json"));
-const lodash_1 = tslib_1.__importDefault(require("lodash"));
+const lodash_1 = tslib_1.__importDefault(require("underscore"));
 const debug_1 = tslib_1.__importDefault(require("debug"));
 const log = debug_1.default("fetch-dns:rrtypes");
 const debug = log.extend("debug");
 if (debug.enabled)
     log.enabled = true;
-const rrtypeMap = lodash_1.default.fromPairs(lodash_1.default.flatMap(RrtypesData_json_1.default, (rrtype) => {
-    debug("Processing RRTYPE map entry", rrtype);
-    const { TYPE, Value } = rrtype || {};
-    if (TYPE === "Unassigned" ||
-        TYPE === "Private use" ||
-        TYPE === "Reserved") {
-        debug("Skipping unused RRTYPE allocation", TYPE, Value);
-        return [];
-    }
-    const [start, stop] = lodash_1.default.map(lodash_1.default.split(Value, "-", 2), lodash_1.default.toFinite);
-    if (lodash_1.default.includes(Value, "-")) {
-        if (start === 0 || stop === 0) {
-            log("Discovered an unbounded value", rrtype);
-            return [];
-        }
-        else {
-            return lodash_1.default.map(lodash_1.default.range(start, stop + 1), (i) => [lodash_1.default.toString(i), TYPE]);
-        }
-    }
-    else {
-        return [[Value, TYPE]];
-    }
+const rrtypeMap = Object.fromEntries(RrtypesData_json_1.default.flatMap((rrtype) => {
+  debug("Processing RRTYPE map entry", rrtype);
+  const { TYPE, Value } = rrtype || {};
+  if (TYPE === "Unassigned" ||
+      TYPE === "Private use" ||
+      TYPE === "Reserved") {
+      debug("Skipping unused RRTYPE allocation", TYPE, Value);
+      return [];
+  }
+  const [start, stop] = lodash_1.default.map(Value.split("-").slice(0, 2), lodash_1.default.toFinite);
+  if (lodash_1.default.includes(Value, "-")) {
+      if (start === 0 || stop === 0) {
+          log("Discovered an unbounded value", rrtype);
+          return [];
+      }
+      else {
+          return lodash_1.default.map(lodash_1.default.range(start, stop + 1), (i) => [lodash_1.default.toString(i), TYPE]);
+      }
+  }
+  else {
+      return [[Value, TYPE]];
+  }
 }));
 log(rrtypeMap);
 function lookupRrtype(rrtype) {
diff --git a/node_modules/fetch-dns/build/index.js b/node_modules/fetch-dns/build/index.js
index a5b34bd..7a0cdff 100644
--- a/node_modules/fetch-dns/build/index.js
+++ b/node_modules/fetch-dns/build/index.js
@@ -1,14 +1,15 @@
 "use strict";
-const _ = require("lodash");
+const _ = require("underscore");
 const CACHE = require("./Cache").default;
 const DEFAULT_SERVERS = require("./DefaultServers").default;
 const fetch = require("cross-fetch");
-const Promise = require("bluebird");
+require('any-promise/register/es6-promise')
+const Promise = require('any-promise')
 const makeDebug = require("debug");
 const lookupRrtype = require("./Rrtypes").default;
 const { name: packageName, version: packageVersion, } = require("./package.json");
-module.exports = {};
-_.merge(module.exports, require("./Constants"));
+module.exports = { ...require("./Constants") };
+// _.merge(module.exports, require("./Constants"));
 const DEFAULT_TTL_SECONDS = 3600;
 const IP_FAMILY_4 = 4;
 const IP_FAMILY_6 = 6;
@@ -119,7 +120,8 @@ function lookupCallback(promise, callback) {
     callbackPromise2(promise.then(({ address, family }) => [address, family]), callback);
 }
 module.exports.getDefaultServers = () => {
-    return _.cloneDeep(DEFAULT_SERVERS);
+    // return _.cloneDeep(DEFAULT_SERVERS);
+    return DEFAULT_SERVERS;
 };
 const promises = (module.exports.promises = {});
 promises.Resolver = class PromiseResolver {
@@ -193,7 +195,8 @@ promises.Resolver = class PromiseResolver {
             throw new Error("No servers found");
         }
         else {
-            return _.cloneDeep(servers);
+            // return _.cloneDeep(servers);
+            return servers;
         }
     }
     setServers(servers) {
@@ -201,7 +204,8 @@ promises.Resolver = class PromiseResolver {
             throw new Error("Refusing to set empty servers for DNS");
         }
         log("Setting servers", servers);
-        this._servers = _.cloneDeep(servers);
+        // this._servers = _.cloneDeep(servers);
+        this._servers = servers;
     }
     _pickServer() {
         const toReturn = _.sample(this.getServers());
diff --git a/node_modules/fetch-dns/index.js b/node_modules/fetch-dns/index.js
index 8ba0ded..5c2250e 100644
--- a/node_modules/fetch-dns/index.js
+++ b/node_modules/fetch-dns/index.js
@@ -2,11 +2,12 @@
 
 "use strict";
 
-const _ = require("lodash");
+const _ = require("underscore");
 const CACHE = require("./Cache").default;
 const DEFAULT_SERVERS = require("./DefaultServers").default;
 const fetch = require("cross-fetch");
-const Promise = require("bluebird");
+require('any-promise/register/es6-promise')
+const Promise = require('any-promise')
 const makeDebug = require("debug");
 const lookupRrtype = require("./Rrtypes").default;
 const {
@@ -14,8 +15,8 @@ const {
 	version: packageVersion,
 } = require("./package.json");
 
-module.exports = {};
-_.merge(module.exports, require("./Constants"));
+module.exports = { ...require("./Constants") };
+// _.merge(module.exports, require("./Constants"));
 
 /* eslint-disable no-magic-numbers */
 const DEFAULT_TTL_SECONDS = 3600;
@@ -169,7 +170,8 @@ function lookupCallback(promise, callback) {
 /* eslint-enable promise/no-callback-in-promise */
 
 module.exports.getDefaultServers = () => {
-	return _.cloneDeep(DEFAULT_SERVERS);
+	// return _.cloneDeep(DEFAULT_SERVERS);
+  return DEFAULT_SERVERS;
 };
 
 const promises = (module.exports.promises = {});
@@ -256,7 +258,8 @@ promises.Resolver = class PromiseResolver {
 		if (!servers || _.isEmpty(servers)) {
 			throw new Error("No servers found");
 		} else {
-			return _.cloneDeep(servers);
+			// return _.cloneDeep(servers);
+      return servers;
 		}
 	}
 
@@ -265,7 +268,8 @@ promises.Resolver = class PromiseResolver {
 			throw new Error("Refusing to set empty servers for DNS");
 		}
 		log("Setting servers", servers);
-		this._servers = _.cloneDeep(servers);
+		// this._servers = _.cloneDeep(servers);
+    this._servers = servers;
 	}
 
 	_pickServer() {
